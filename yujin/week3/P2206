// p2206

package week3;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class T2 {

	public static int[][] map;
	public static int[][][] visited;
	public static int[] dx = { -1, 0, 1, 0 };
	public static int[] dy = { 0, 1, 0, -1 };
	public static int N, M;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());

		map = new int[N][M];
		visited = new int[N][M][2];

		for (int i = 0; i < N; i++) {
			String line = br.readLine();
			for (int j = 0; j < M; j++) {
				map[i][j] = line.charAt(j) - '0';

			}
		}

		System.out.println(bfs(0, 0));

	}

	private static int bfs(int i, int j) {

		Queue<int[]> q = new LinkedList<int[]>();
		q.offer(new int[] { i, j, 0 });
		visited[i][j][0] = 1;

		while (!(q.isEmpty())) {
			int[] now = q.poll();

			int x = now[0];
			int y = now[1];
			int wall = now[2];

//			System.out.println(x+" "+y+ " "+ wall);

			if (x == N - 1 && y == M - 1) {
				return visited[N - 1][M - 1][wall];
			}

			for (int d = 0; d < 4; d++) {
				int nx = x + dx[d];
				int ny = y + dy[d];

				if (nx < 0 || nx >= N || ny < 0 || ny >= M)
					continue;
				if (visited[nx][ny][wall] > 0)
					continue;
				// 벽인데 벽을 아직 부수지 않은 경우 -> 벽을 하나 부수고 q에 삽입
				if (map[nx][ny] == 1 && wall == 0) {
					q.offer(new int[] { nx, ny, wall + 1 });
					visited[nx][ny][wall + 1] = visited[x][y][wall] + 1;
				}
				// 벽이 아닌 경우
				if (map[nx][ny] == 0) {
					q.offer(new int[] { nx, ny, wall });
					visited[nx][ny][wall] = visited[x][y][wall] + 1;
				}
			}

		}

		return -1;

	}

}
